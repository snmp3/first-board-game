export class CanvasRenderer {
    constructor() {
        this.canvas = null;
        this.ctx = null;
        this.initialized = false;
        this.debug = true;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –∫–ª–µ—Ç–∫–∞–º–∏
        this.boardConfig = {
            canvasWidth: 800,
            canvasHeight: 600,
            cellsPerRow: 12,
            cellsPerColumn: 10, // 120 –∫–ª–µ—Ç–æ–∫ –≤—Å–µ–≥–æ
            cellSize: 55, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 45 –¥–æ 55 –¥–ª—è –ª—É—á—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            borderWidth: 3,
            borderColor: '#2c3e50',
            backgroundColor: '#ecf0f1'
        };
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        this.calculatePadding();
        
        // –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ª–µ—Å—Ç–Ω–∏—Ü—ã –∏ –∑–º–µ–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ª–∏–Ω–∏–π
        this.snakesAndLadders = [
            // –õ–µ—Å—Ç–Ω–∏—Ü—ã (–≤–≤–µ—Ä—Ö)
            { from: 4, to: 14, type: 'ladder' },
            { from: 9, to: 31, type: 'ladder' },
            { from: 21, to: 42, type: 'ladder' },
            { from: 28, to: 84, type: 'ladder' },
            { from: 36, to: 44, type: 'ladder' },
            { from: 51, to: 67, type: 'ladder' },
            { from: 71, to: 91, type: 'ladder' },
            { from: 80, to: 100, type: 'ladder' },
            
            // –ó–º–µ–∏ (–≤–Ω–∏–∑)
            { from: 16, to: 6, type: 'snake' },
            { from: 47, to: 26, type: 'snake' },
            { from: 49, to: 11, type: 'snake' },
            { from: 56, to: 53, type: 'snake' },
            { from: 62, to: 19, type: 'snake' },
            { from: 64, to: 60, type: 'snake' },
            { from: 87, to: 24, type: 'snake' },
            { from: 93, to: 73, type: 'snake' },
            { from: 95, to: 75, type: 'snake' },
            { from: 98, to: 78, type: 'snake' }
        ];
    }

    log(...args) {
        if (this.debug) {
            console.log('[CanvasRenderer]', ...args);
        }
    }

    error(...args) {
        console.error('[CanvasRenderer]', ...args);
    }

    calculatePadding() {
        const { canvasWidth, canvasHeight, cellsPerRow, cellsPerColumn, cellSize } = this.boardConfig;
        
        // –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏
        const gridWidth = cellsPerRow * cellSize;
        const gridHeight = cellsPerColumn * cellSize;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
        this.boardConfig.paddingX = (canvasWidth - gridWidth) / 2;
        this.boardConfig.paddingY = (canvasHeight - gridHeight) / 2;
        
        this.log(`–†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –æ—Ç—Å—Ç—É–ø—ã: X=${this.boardConfig.paddingX}, Y=${this.boardConfig.paddingY}`);
        this.log(`–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏: ${gridWidth}x${gridHeight}, Canvas: ${canvasWidth}x${canvasHeight}`);
        this.log(`–†–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏: ${cellSize}px`);
    }

    setupCanvas() {
        try {
            this.canvas = document.getElementById('game-board');
            if (!this.canvas) {
                this.error('Canvas —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return false;
            }

            this.ctx = this.canvas.getContext('2d');
            if (!this.ctx) {
                this.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 2D –∫–æ–Ω—Ç–µ–∫—Å—Ç');
                return false;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
            this.canvas.width = this.boardConfig.canvasWidth;
            this.canvas.height = this.boardConfig.canvasHeight;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
            this.canvas.style.maxWidth = '100%';
            this.canvas.style.height = 'auto';
            this.canvas.style.border = `${this.boardConfig.borderWidth}px solid ${this.boardConfig.borderColor}`;
            this.canvas.style.borderRadius = '10px';
            this.canvas.style.backgroundColor = this.boardConfig.backgroundColor;

            this.initialized = true;
            this.log('‚úÖ Canvas –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–∞–∑–º–µ—Ä–æ–º –∫–ª–µ—Ç–æ–∫:', this.boardConfig.cellSize);
            
            return true;
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Canvas:', error);
            return false;
        }
    }

    drawBoard(gameBoard) {
        if (!this.initialized) {
            this.error('Canvas –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        try {
            // –û—á–∏—â–∞–µ–º canvas
            this.ctx.clearRect(0, 0, this.boardConfig.canvasWidth, this.boardConfig.canvasHeight);
            
            // –ó–∞–ª–∏–≤–∞–µ–º —Ñ–æ–Ω
            this.ctx.fillStyle = this.boardConfig.backgroundColor;
            this.ctx.fillRect(0, 0, this.boardConfig.canvasWidth, this.boardConfig.canvasHeight);
            
            // –†–∏—Å—É–µ–º –∫–ª–µ—Ç–∫–∏ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
            this.drawCells();
            
            // –†–∏—Å—É–µ–º –ª–µ—Å—Ç–Ω–∏—Ü—ã –∏ –∑–º–µ–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            this.drawSnakesAndLadders();
            
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –¥–æ—Å–∫–∏:', error);
        }
    }

    drawCells() {
        const { cellSize, cellsPerRow, cellsPerColumn, paddingX, paddingY } = this.boardConfig;
        
        for (let row = 0; row < cellsPerColumn; row++) {
            for (let col = 0; col < cellsPerRow; col++) {
                // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ (–∑–º–µ–π–∫–∞)
                let cellNumber;
                if (row % 2 === 0) {
                    // –ß–µ—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
                    cellNumber = row * cellsPerRow + col + 1;
                } else {
                    // –ù–µ—á–µ—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
                    cellNumber = row * cellsPerRow + (cellsPerRow - col);
                }
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–µ—Ç–∫–∏ –±–æ–ª—å—à–µ 120
                if (cellNumber > 120) continue;
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º –æ—Ç—Å—Ç—É–ø–æ–≤
                const x = paddingX + col * cellSize;
                const y = paddingY + (cellsPerColumn - 1 - row) * cellSize; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Y –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                
                this.drawCell(x, y, cellSize, cellNumber);
            }
        }
    }

    drawCell(x, y, size, number) {
        // –¶–≤–µ—Ç –∫–ª–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        let cellColor = '#ffffff';
        let textColor = '#2c3e50';
        let borderColor = '#bdc3c7';
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
        if (number === 1) {
            cellColor = '#2ecc71'; // –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–µ—Ç–∫–∞ - –∑–µ–ª–µ–Ω–∞—è
            textColor = '#ffffff';
        } else if (number === 120) {
            cellColor = '#e74c3c'; // –§–∏–Ω–∏—à–Ω–∞—è –∫–ª–µ—Ç–∫–∞ - –∫—Ä–∞—Å–Ω–∞—è
            textColor = '#ffffff';
        } else if (this.isLadderStart(number)) {
            cellColor = '#3498db'; // –ù–∞—á–∞–ª–æ –ª–µ—Å—Ç–Ω–∏—Ü—ã - —Å–∏–Ω—è—è
            textColor = '#ffffff';
        } else if (this.isSnakeStart(number)) {
            cellColor = '#e67e22'; // –ù–∞—á–∞–ª–æ –∑–º–µ–∏ - –æ—Ä–∞–Ω–∂–µ–≤–∞—è
            textColor = '#ffffff';
        } else if (this.isLadderEnd(number)) {
            cellColor = '#85c1e9'; // –ö–æ–Ω–µ—Ü –ª–µ—Å—Ç–Ω–∏—Ü—ã - —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω—è—è
        } else if (this.isSnakeEnd(number)) {
            cellColor = '#f8c471'; // –ö–æ–Ω–µ—Ü –∑–º–µ–∏ - —Å–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤–∞—è
        }
        
        // –†–∏—Å—É–µ–º —Ñ–æ–Ω –∫–ª–µ—Ç–∫–∏
        this.ctx.fillStyle = cellColor;
        this.ctx.fillRect(x + 1, y + 1, size - 2, size - 2);
        
        // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—É –∫–ª–µ—Ç–∫–∏
        this.ctx.strokeStyle = borderColor;
        this.ctx.lineWidth = 1;
        this.ctx.strokeRect(x, y, size, size);
        
        // –†–∏—Å—É–µ–º –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏
        this.ctx.fillStyle = textColor;
        this.ctx.font = 'bold 14px Arial'; // –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        this.ctx.textAlign = 'center';
        this.ctx.textBaseline = 'middle';
        this.ctx.fillText(number.toString(), x + size / 2, y + size / 2);
        
        // –†–∏—Å—É–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
        if (this.isLadderStart(number)) {
            this.ctx.font = 'bold 16px Arial';
            this.ctx.fillStyle = '#ffffff';
            this.ctx.fillText('ü™ú', x + size / 2, y + size / 4);
        } else if (this.isSnakeStart(number)) {
            this.ctx.font = 'bold 16px Arial';
            this.ctx.fillStyle = '#ffffff';
            this.ctx.fillText('üêç', x + size / 2, y + size / 4);
        }
    }

    isLadderStart(number) {
        return this.snakesAndLadders.some(item => item.from === number && item.type === 'ladder');
    }

    isSnakeStart(number) {
        return this.snakesAndLadders.some(item => item.from === number && item.type === 'snake');
    }

    isLadderEnd(number) {
        return this.snakesAndLadders.some(item => item.to === number && item.type === 'ladder');
    }

    isSnakeEnd(number) {
        return this.snakesAndLadders.some(item => item.to === number && item.type === 'snake');
    }

    drawSnakesAndLadders() {
        this.snakesAndLadders.forEach(({ from, to, type }) => {
            const fromPos = this.getCellPosition(from);
            const toPos = this.getCellPosition(to);
            
            if (type === 'ladder') {
                this.drawLadder(fromPos, toPos);
            } else if (type === 'snake') {
                this.drawSnake(fromPos, toPos);
            }
        });
    }

    getCellPosition(cellNumber) {
        const { cellSize, cellsPerRow, cellsPerColumn, paddingX, paddingY } = this.boardConfig;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        const row = Math.floor((cellNumber - 1) / cellsPerRow);
        let col;
        
        if (row % 2 === 0) {
            // –ß–µ—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
            col = (cellNumber - 1) % cellsPerRow;
        } else {
            // –ù–µ—á–µ—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
            col = cellsPerRow - 1 - ((cellNumber - 1) % cellsPerRow);
        }
        
        const x = paddingX + col * cellSize + cellSize / 2;
        const y = paddingY + (cellsPerColumn - 1 - row) * cellSize + cellSize / 2;
        
        return { x, y };
    }

    // –£–ü–†–û–©–ï–ù–ù–ê–Ø –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–µ—Å—Ç–Ω–∏—Ü—ã - —Ç–æ–Ω–∫–∏–µ –ø—Ä—è–º—ã–µ –ª–∏–Ω–∏–∏
    drawLadder(fromPos, toPos) {
        this.ctx.strokeStyle = '#27ae60';
        this.ctx.lineWidth = 2; // –¢–æ–Ω–∫–∞—è –ª–∏–Ω–∏—è
        this.ctx.setLineDash([]);
        
        // –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä—è–º—É—é –ª–∏–Ω–∏—é –æ—Ç –Ω–∞—á–∞–ª–∞ –∫ –∫–æ–Ω—Ü—É
        this.ctx.beginPath();
        this.ctx.moveTo(fromPos.x, fromPos.y);
        this.ctx.lineTo(toPos.x, toPos.y);
        this.ctx.stroke();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–µ–ª–∫—É –≤ –∫–æ–Ω—Ü–µ
        this.drawSimpleArrow(fromPos, toPos, '#27ae60');
    }

    // –£–ü–†–û–©–ï–ù–ù–ê–Ø –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–º–µ–∏ - —Ç–æ–Ω–∫–∏–µ –ø—Ä—è–º—ã–µ –ª–∏–Ω–∏–∏
    drawSnake(fromPos, toPos) {
        this.ctx.strokeStyle = '#e74c3c';
        this.ctx.lineWidth = 2; // –¢–æ–Ω–∫–∞—è –ª–∏–Ω–∏—è
        this.ctx.setLineDash([5, 5]); // –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è –¥–ª—è –æ—Ç–ª–∏—á–∏—è –æ—Ç –ª–µ—Å—Ç–Ω–∏—Ü
        
        // –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä—è–º—É—é –ª–∏–Ω–∏—é –æ—Ç –Ω–∞—á–∞–ª–∞ –∫ –∫–æ–Ω—Ü—É
        this.ctx.beginPath();
        this.ctx.moveTo(fromPos.x, fromPos.y);
        this.ctx.lineTo(toPos.x, toPos.y);
        this.ctx.stroke();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç–∏—Ä
        this.ctx.setLineDash([]);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–µ–ª–∫—É –≤ –∫–æ–Ω—Ü–µ
        this.drawSimpleArrow(fromPos, toPos, '#e74c3c');
    }

    // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–µ–ª–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    drawSimpleArrow(fromPos, toPos, color) {
        this.ctx.fillStyle = color;
        this.ctx.strokeStyle = color;
        this.ctx.lineWidth = 2;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        const deltaX = toPos.x - fromPos.x;
        const deltaY = toPos.y - fromPos.y;
        const length = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        
        if (length === 0) return;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        const unitX = deltaX / length;
        const unitY = deltaY / length;
        
        // –†–∞–∑–º–µ—Ä —Å—Ç—Ä–µ–ª–∫–∏
        const arrowSize = 8;
        
        // –ü–æ–∑–∏—Ü–∏—è —Å—Ç—Ä–µ–ª–∫–∏ (–Ω–µ–º–Ω–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞–µ–º –æ—Ç –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏)
        const arrowX = toPos.x - unitX * 10;
        const arrowY = toPos.y - unitY * 10;
        
        // –†–∏—Å—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω—É—é —Å—Ç—Ä–µ–ª–∫—É
        this.ctx.beginPath();
        this.ctx.moveTo(toPos.x, toPos.y);
        this.ctx.lineTo(
            arrowX - unitY * arrowSize / 2,
            arrowY + unitX * arrowSize / 2
        );
        this.ctx.lineTo(
            arrowX + unitY * arrowSize / 2,
            arrowY - unitX * arrowSize / 2
        );
        this.ctx.closePath();
        this.ctx.fill();
    }

    drawPlayers(players) {
        if (!this.initialized || !players) return;
        
        try {
            players.forEach((player, index) => {
                if (player.position >= 0 && player.position < 120) {
                    this.drawPlayer(player, index);
                }
            });
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:', error);
        }
    }

    drawPlayer(player, index) {
        const pos = this.getCellPosition(player.position + 1);
        const { cellSize } = this.boardConfig;
        
        // –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–ª–µ—Ç–æ–∫)
        const offsetX = (index % 2) * 12 - 6;
        const offsetY = Math.floor(index / 2) * 12 - 6;
        
        const x = pos.x + offsetX;
        const y = pos.y + offsetY;
        
        // –†–∏—Å—É–µ–º —Ñ–∏—à–∫—É –∏–≥—Ä–æ–∫–∞ (—É–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä)
        this.ctx.fillStyle = player.color;
        this.ctx.strokeStyle = '#2c3e50';
        this.ctx.lineWidth = 2;
        
        this.ctx.beginPath();
        this.ctx.arc(x, y, 15, 0, 2 * Math.PI); // –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–¥–∏—É—Å —Å 12 –¥–æ 15
        this.ctx.fill();
        this.ctx.stroke();
        
        // –†–∏—Å—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞
        this.ctx.fillStyle = '#ffffff';
        this.ctx.font = 'bold 12px Arial'; // –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        this.ctx.textAlign = 'center';
        this.ctx.textBaseline = 'middle';
        
        const displayText = player.name.charAt(0).toUpperCase();
        this.ctx.fillText(displayText, x, y);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ canvas –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    resize() {
        if (!this.initialized) return;
        
        const container = this.canvas.parentElement;
        if (!container) return;
        
        const containerWidth = container.clientWidth - 40; // –£—á–∏—Ç—ã–≤–∞–µ–º padding
        const aspectRatio = this.boardConfig.canvasHeight / this.boardConfig.canvasWidth;
        
        if (containerWidth < this.boardConfig.canvasWidth) {
            this.canvas.style.width = containerWidth + 'px';
            this.canvas.style.height = (containerWidth * aspectRatio) + 'px';
        } else {
            this.canvas.style.width = this.boardConfig.canvasWidth + 'px';
            this.canvas.style.height = this.boardConfig.canvasHeight + 'px';
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–ª–µ—Ç–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
    getCellCoordinates(cellNumber) {
        return this.getCellPosition(cellNumber);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–ª–µ—Ç–∫–µ
    getSpecialCellInfo(cellNumber) {
        const snakeOrLadder = this.snakesAndLadders.find(item => item.from === cellNumber);
        return snakeOrLadder || null;
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    getDebugInfo() {
        return {
            initialized: this.initialized,
            canvasSize: {
                width: this.canvas?.width,
                height: this.canvas?.height
            },
            boardConfig: this.boardConfig,
            padding: {
                x: this.boardConfig.paddingX,
                y: this.boardConfig.paddingY
            },
            snakesAndLaddersCount: this.snakesAndLadders.length
        };
    }

    // –û—á–∏—Å—Ç–∫–∞ canvas
    clear() {
        if (this.initialized && this.ctx) {
            this.ctx.clearRect(0, 0, this.boardConfig.canvasWidth, this.boardConfig.canvasHeight);
        }
    }
}
