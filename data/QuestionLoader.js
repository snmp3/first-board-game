export class QuestionLoader {
    constructor() {
        this.questions = new Map();
        this.subjectsConfig = null;
        this.loaded = false;
        this.debug = true;
    }

    log(...args) {
        if (this.debug) {
            console.log('[QuestionLoader]', ...args);
        }
    }

    error(...args) {
        console.error('[QuestionLoader]', ...args);
    }

    async loadQuestions() {
        try {
            this.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...');
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–Ω–µ—à–Ω—é—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            const configLoaded = await this.loadSubjectsConfig();
            
            if (configLoaded) {
                // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–æ–≤
                const subjects = Object.keys(this.subjectsConfig.subjects);
                let successCount = 0;
                
                for (const subjectId of subjects) {
                    const loaded = await this.loadSubjectQuestions(subjectId);
                    if (loaded) successCount++;
                }
                
                if (successCount > 0) {
                    this.loaded = true;
                    this.log('‚úÖ –í–Ω–µ—à–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
                    this.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', this.getLoadingStatistics());
                    return true;
                }
            }
            
            // –ï—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
            this.log('–í–Ω–µ—à–Ω–∏–µ —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã');
            this.loadFallbackQuestions();
            
            return true;
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
            this.loadFallbackQuestions();
            return true;
        }
    }

    async loadSubjectsConfig() {
        try {
            const response = await fetch('./data/subjects-config.json');
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            this.subjectsConfig = await response.json();
            this.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            return true;
            
        } catch (error) {
            this.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', error);
            this.createFallbackConfig();
            return false;
        }
    }

    createFallbackConfig() {
        this.subjectsConfig = {
            subjects: {
                math: {
                    name: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                    description: "–°–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ",
                    icon: "üî¢",
                    difficulty: "2nd-grade"
                },
                russian: {
                    name: "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", 
                    description: "–ë—É–∫–≤—ã –∏ —Å–ª–æ–≤–∞",
                    icon: "üìù",
                    difficulty: "2nd-grade"
                },
                nature: {
                    name: "–û–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä",
                    description: "–ñ–∏–≤–æ—Ç–Ω—ã–µ –∏ —Ä–∞—Å—Ç–µ–Ω–∏—è",
                    icon: "üåç",
                    difficulty: "2nd-grade"
                },
                reading: {
                    name: "–ß—Ç–µ–Ω–∏–µ",
                    description: "–°–∫–∞–∑–∫–∏ –∏ –∫–Ω–∏–≥–∏",
                    icon: "üìö",
                    difficulty: "2nd-grade"
                },
                riddles: {
                    name: "–ó–∞–≥–∞–¥–∫–∏",
                    description: "–î–µ—Ç—Å–∫–∏–µ –∑–∞–≥–∞–¥–∫–∏",
                    icon: "üß©",
                    difficulty: "2nd-grade"
                }
            },
            defaultSelected: ["math", "russian"],
            gradeLevel: "2nd-grade",
            language: "ru"
        };
        
        this.log('–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤');
    }

    async loadSubjectQuestions(subjectId) {
        try {
            const subjectInfo = this.subjectsConfig.subjects[subjectId];
            if (!subjectInfo || !subjectInfo.file) {
                return false;
            }
            
            this.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: ${subjectInfo.name} (${subjectInfo.file})`);
            
            const response = await fetch(`./data/questions/${subjectInfo.file}`);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const markdownContent = await response.text();
            const questions = this.parseMarkdownQuestions(markdownContent, subjectId);
            
            this.questions.set(subjectId, questions);
            this.log(`‚úÖ ${subjectInfo.name}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤`);
            
            return true;
        } catch (error) {
            this.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ ${subjectId}:`, error);
            return false;
        }
    }

    parseMarkdownQuestions(markdownContent, subjectId) {
        const questions = [];
        const lines = markdownContent.split('\n');
        
        for (const line of lines) {
            const trimmedLine = line.trim();
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if (!trimmedLine || 
                trimmedLine.startsWith('#') || 
                trimmedLine.startsWith('<!--') ||
                trimmedLine.startsWith('-->')) {
                continue;
            }
            
            // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –í–æ–ø—Ä–æ—Å?|–û—Ç–≤–µ—Ç
            if (trimmedLine.includes('|')) {
                const [questionText, answer] = trimmedLine.split('|', 2);
                
                if (questionText.trim() && answer.trim()) {
                    questions.push({
                        text: questionText.trim(),
                        answer: answer.trim(),
                        subject: subjectId
                    });
                }
            }
        }
        
        return questions;
    }

    loadFallbackQuestions() {
        // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (–ø–æ 20 –≤–æ–ø—Ä–æ—Å–æ–≤)
        const fallbackQuestions = {
            math: [
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 12 + 13?", answer: "25", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 25 - 12?", answer: "13", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 15 + 16?", answer: "31", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 31 - 16?", answer: "15", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 18 + 17?", answer: "35", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 35 - 17?", answer: "18", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 14 + 19?", answer: "33", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 33 - 14?", answer: "19", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 23 + 24?", answer: "47", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 47 - 23?", answer: "24", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 21 + 28?", answer: "49", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 49 - 21?", answer: "28", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 16 + 22?", answer: "38", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 38 - 16?", answer: "22", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 19 + 25?", answer: "44", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 44 - 19?", answer: "25", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 17 + 18?", answer: "35", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 26 + 23?", answer: "49", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 13 + 14?", answer: "27", subject: "math" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 22 + 17?", answer: "39", subject: "math" }
            ],
            russian: [
                { text: "–ö–∞–∫–∞—è –±—É–∫–≤–∞ –∏–¥–µ—Ç –ø–æ—Å–ª–µ –ê?", answer: "–ë", subject: "russian" },
                { text: "–ö–∞–∫–∞—è –±—É–∫–≤–∞ –∏–¥–µ—Ç –ø–µ—Ä–µ–¥ –í?", answer: "–ë", subject: "russian" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–∫–≤ –≤ —Ä—É—Å—Å–∫–æ–º –∞–ª—Ñ–∞–≤–∏—Ç–µ?", answer: "33", subject: "russian" },
                { text: "–ö–∞–∫–∞—è –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∞–ª—Ñ–∞–≤–∏—Ç–∞?", answer: "–ê", subject: "russian" },
                { text: "–ö–∞–∫–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞ –∞–ª—Ñ–∞–≤–∏—Ç–∞?", answer: "–Ø", subject: "russian" },
                { text: "–ö–∞–∫ –ø–∏—à–µ—Ç—Å—è —Å–ª–æ–≤–æ '–º–∞–º–∞'?", answer: "–º–∞–º–∞", subject: "russian" },
                { text: "–ö–∞–∫ –ø–∏—à–µ—Ç—Å—è —Å–ª–æ–≤–æ '–ø–∞–ø–∞'?", answer: "–ø–∞–ø–∞", subject: "russian" },
                { text: "–° –∫–∞–∫–æ–π –±—É–∫–≤—ã –ø–∏—à–µ—Ç—Å—è –∏–º—è –ú–∞—à–∞?", answer: "–ú", subject: "russian" },
                { text: "–° –∫–∞–∫–æ–π –±—É–∫–≤—ã –ø–∏—à–µ—Ç—Å—è –∏–º—è –ü–µ—Ç—è?", answer: "–ü", subject: "russian" },
                { text: "–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≥–æ–≤ –≤ —Å–ª–æ–≤–µ '–º–∞–º–∞'?", answer: "2", subject: "russian" },
                { text: "–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≥–æ–≤ –≤ —Å–ª–æ–≤–µ '–¥–æ–º'?", answer: "1", subject: "russian" },
                { text: "–°–∫–æ–ª—å–∫–æ –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ '–º–∞–º–∞'?", answer: "2", subject: "russian" },
                { text: "–ö–∞–∫–∞—è –±—É–∫–≤–∞ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å–ª–æ–≤–∞ '–º–∏—Ä'?", answer: "–ò", subject: "russian" },
                { text: "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: '–º–æ–π –î–æ–º' –∏–ª–∏ '–º–æ–π –¥–æ–º'?", answer: "–º–æ–π –¥–æ–º", subject: "russian" },
                { text: "–ö–∞–∫ –ø–∏—à–µ—Ç—Å—è —Å–ª–æ–≤–æ '–¥–æ–º'?", answer: "–¥–æ–º", subject: "russian" },
                { text: "–ö–∞–∫ –ø–∏—à–µ—Ç—Å—è —Å–ª–æ–≤–æ '–∫–æ—Ç'?", answer: "–∫–æ—Ç", subject: "russian" },
                { text: "–ö–∞–∫ –ø–∏—à–µ—Ç—Å—è —Å–ª–æ–≤–æ '—Å–æ–Ω'?", answer: "—Å–æ–Ω", subject: "russian" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ '—à–∫–æ–ª–∞'?", answer: "5", subject: "russian" },
                { text: "–ö–∞–∫–∞—è –≥–ª–∞—Å–Ω–∞—è –≤ —Å–ª–æ–≤–µ '—Å–æ–Ω'?", answer: "–û", subject: "russian" },
                { text: "–ö–∞–∫–∞—è —Å–æ–≥–ª–∞—Å–Ω–∞—è –≤ –Ω–∞—á–∞–ª–µ —Å–ª–æ–≤–∞ '—Ä—É–∫–∞'?", answer: "–†", subject: "russian" }
            ],
            nature: [
                { text: "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–µ—Ç–µ–Ω—ã—à –∫–æ—Ä–æ–≤—ã?", answer: "—Ç–µ–ª–µ–Ω–æ–∫", subject: "nature" },
                { text: "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–µ—Ç–µ–Ω—ã—à –ª–æ—à–∞–¥–∏?", answer: "–∂–µ—Ä–µ–±–µ–Ω–æ–∫", subject: "nature" },
                { text: "–ß—Ç–æ –¥–∞–µ—Ç –∫–æ—Ä–æ–≤–∞?", answer: "–º–æ–ª–æ–∫–æ", subject: "nature" },
                { text: "–ß—Ç–æ –¥–∞–µ—Ç –∫—É—Ä–∏—Ü–∞?", answer: "—è–π—Ü–∞", subject: "nature" },
                { text: "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω –≥–æ–¥–∞?", answer: "4", subject: "nature" },
                { text: "–ö–æ–≥–¥–∞ —Ç–∞–µ—Ç —Å–Ω–µ–≥?", answer: "–≤–µ—Å–Ω–æ–π", subject: "nature" },
                { text: "–ö–æ–≥–¥–∞ –∂–µ–ª—Ç–µ—é—Ç –ª–∏—Å—Ç—å—è?", answer: "–æ—Å–µ–Ω—å—é", subject: "nature" },
                { text: "–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –ª–∏—Å—Ç—å—è –ª–µ—Ç–æ–º?", answer: "–∑–µ–ª–µ–Ω—ã–µ", subject: "nature" },
                { text: "–ì–¥–µ –∂–∏–≤–µ—Ç –º–µ–¥–≤–µ–¥—å –∑–∏–º–æ–π?", answer: "–≤ –±–µ—Ä–ª–æ–≥–µ", subject: "nature" },
                { text: "–ß—Ç–æ –µ—Å—Ç –∑–∞—è—Ü?", answer: "–º–æ—Ä–∫–æ–≤—å", subject: "nature" },
                { text: "–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –ª–∏—Å–∞?", answer: "—Ä—ã–∂–∞—è", subject: "nature" },
                { text: "–°–∫–æ–ª—å–∫–æ –ª–∞–ø —É –∫–æ—à–∫–∏?", answer: "4", subject: "nature" },
                { text: "–ì–¥–µ –∂–∏–≤–µ—Ç –±–µ–ª–∫–∞?", answer: "–≤ –¥—É–ø–ª–µ", subject: "nature" },
                { text: "–ö–∞–∫–∞—è –ø—Ç–∏—Ü–∞ –∫—É–∫—É–µ—Ç?", answer: "–∫—É–∫—É—à–∫–∞", subject: "nature" },
                { text: "–ì–¥–µ —Å—Ç—Ä–æ—è—Ç –≥–Ω–µ–∑–¥–∞ –ø—Ç–∏—Ü—ã?", answer: "–Ω–∞ –¥–µ—Ä–µ–≤—å—è—Ö", subject: "nature" },
                { text: "–ß—Ç–æ –Ω—É–∂–Ω–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º –¥–ª—è —Ä–æ—Å—Ç–∞?", answer: "–≤–æ–¥–∞", subject: "nature" },
                { text: "–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –º–æ—Ä–∫–æ–≤—å?", answer: "–æ—Ä–∞–Ω–∂–µ–≤–∞—è", subject: "nature" },
                { text: "–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –ø–æ–º–∏–¥–æ—Ä?", answer: "–∫—Ä–∞—Å–Ω—ã–π", subject: "nature" },
                { text: "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ —Å–∞–º—ã–µ –¥–ª–∏–Ω–Ω—ã–µ –¥–Ω–∏?", answer: "–ª–µ—Ç–æ–º", subject: "nature" },
                { text: "–ö–æ–≥–¥–∞ –∏–¥–µ—Ç —Å–Ω–µ–≥?", answer: "–∑–∏–º–æ–π", subject: "nature" }
            ],
            reading: [
                { text: "–ö—Ç–æ —Å—ä–µ–ª –ö–æ–ª–æ–±–∫–∞?", answer: "–ª–∏—Å–∞", subject: "reading" },
                { text: "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–°–∫–∞–∑–∫—É –æ —Ä—ã–±–∞–∫–µ –∏ —Ä—ã–±–∫–µ'?", answer: "–ü—É—à–∫–∏–Ω", subject: "reading" },
                { text: "–ß—Ç–æ –ø–æ–π–º–∞–ª —Å—Ç–∞—Ä–∏–∫ –≤ –º–æ—Ä–µ?", answer: "–∑–æ–ª–æ—Ç—É—é —Ä—ã–±–∫—É", subject: "reading" },
                { text: "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–ú—É—Ö—É-–¶–æ–∫–æ—Ç—É—Ö—É'?", answer: "–ß—É–∫–æ–≤—Å–∫–∏–π", subject: "reading" },
                { text: "–ß—Ç–æ –Ω–∞—à–ª–∞ –ú—É—Ö–∞-–¶–æ–∫–æ—Ç—É—Ö–∞?", answer: "–¥–µ–Ω–µ–∂–∫—É", subject: "reading" },
                { text: "–ö—Ç–æ —Å–ø–∞—Å –ú—É—Ö—É –æ—Ç –ø–∞—É–∫–∞?", answer: "–∫–æ–º–∞—Ä", subject: "reading" },
                { text: "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —Å—Ç–∏—Ö–∏ –ø—Ä–æ –∏–≥—Ä—É—à–∫–∏?", answer: "–ë–∞—Ä—Ç–æ", subject: "reading" },
                { text: "–ö—Ç–æ –∏–¥–µ—Ç, –∫–∞—á–∞–µ—Ç—Å—è?", answer: "–±—ã—á–æ–∫", subject: "reading" },
                { text: "–ß—Ç–æ —É—Ä–æ–Ω–∏–ª–∏ –≤ —Ä–µ—á–∫—É?", answer: "–º—è—á–∏–∫", subject: "reading" },
                { text: "–ö–æ–º—É –æ—Ç–æ—Ä–≤–∞–ª–∏ –ª–∞–ø—É?", answer: "–º–∏—à–∫–µ", subject: "reading" },
                { text: "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–æ –ù–µ–∑–Ω–∞–π–∫—É?", answer: "–ù–æ—Å–æ–≤", subject: "reading" },
                { text: "–ì–¥–µ –∂–∏–ª –ù–µ–∑–Ω–∞–π–∫–∞?", answer: "–≤ –¶–≤–µ—Ç–æ—á–Ω–æ–º –≥–æ—Ä–æ–¥–µ", subject: "reading" },
                { text: "–ö–∞–∫ –∑–≤–∞–ª–∏ –¥—Ä—É–≥–∞ –ù–µ–∑–Ω–∞–π–∫–∏?", answer: "–ì—É–Ω—å–∫–∞", subject: "reading" },
                { text: "–°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –±–æ–≥–∞—Ç—ã—Ä–µ–π –≤ —Å–∫–∞–∑–∫–µ?", answer: "3", subject: "reading" },
                { text: "–ß—Ç–æ –ø–æ—Ç–µ—Ä—è–ª–∞ –ó–æ–ª—É—à–∫–∞?", answer: "—Ç—É—Ñ–µ–ª—å–∫—É", subject: "reading" },
                { text: "–ö—Ç–æ –ø–æ–º–æ–≥ –ó–æ–ª—É—à–∫–µ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –±–∞–ª?", answer: "—Ñ–µ—è", subject: "reading" },
                { text: "–ö—Ç–æ –ª–µ—á–∏—Ç –≤—Å–µ—Ö –∑–≤–µ—Ä–µ–π?", answer: "–ê–π–±–æ–ª–∏—Ç", subject: "reading" },
                { text: "–ö—É–¥–∞ –µ—Ö–∞–ª –ê–π–±–æ–ª–∏—Ç?", answer: "–≤ –ê—Ñ—Ä–∏–∫—É", subject: "reading" },
                { text: "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±—ã—á–æ–∫ –Ω–∞ –¥–æ—Å–∫–µ?", answer: "–∏–¥–µ—Ç", subject: "reading" },
                { text: "–ü–æ—á–µ–º—É –ø–ª–∞—á–µ—Ç –¢–∞–Ω—è?", answer: "—É—Ä–æ–Ω–∏–ª–∞ –º—è—á–∏–∫", subject: "reading" }
            ],
            riddles: [
                { text: "–†—ã–∂–∞—è –ø–ª—É—Ç–æ–≤–∫–∞, —Ö–∏—Ç—Ä–∞—è –∏ –ª–æ–≤–∫–∞—è", answer: "–ª–∏—Å–∞", subject: "riddles" },
                { text: "–ó–∏–º–æ–π –∏ –ª–µ—Ç–æ–º –æ–¥–Ω–∏–º —Ü–≤–µ—Ç–æ–º", answer: "–µ–ª–∫–∞", subject: "riddles" },
                { text: "–î–≤–∞ –∫–æ–Ω—Ü–∞, –¥–≤–∞ –∫–æ–ª—å—Ü–∞, –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ –≥–≤–æ–∑–¥–∏–∫", answer: "–Ω–æ–∂–Ω–∏—Ü—ã", subject: "riddles" },
                { text: "–ù–µ –ª–∞–µ—Ç, –Ω–µ –∫—É—Å–∞–µ—Ç, –∞ –≤ –¥–æ–º –Ω–µ –ø—É—Å–∫–∞–µ—Ç", answer: "–∑–∞–º–æ–∫", subject: "riddles" },
                { text: "–°—Ç–æ –æ–¥–µ–∂–µ–∫ –∏ –≤—Å–µ –±–µ–∑ –∑–∞—Å—Ç–µ–∂–µ–∫", answer: "–∫–∞–ø—É—Å—Ç–∞", subject: "riddles" },
                { text: "–°—Ç–æ–∏—Ç –ê–Ω—Ç–æ—à–∫–∞ –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–∂–∫–µ", answer: "–≥—Ä–∏–±", subject: "riddles" },
                { text: "–î–ª–∏–Ω–Ω—ã–µ —É—à–∏, –±—ã—Å—Ç—Ä—ã–µ –Ω–æ–≥–∏", answer: "–∑–∞—è—Ü", subject: "riddles" },
                { text: "–ö–æ—Å–æ–ª–∞–ø—ã–π –∏ –±–æ–ª—å—à–æ–π, —Å–ø–∏—Ç –≤ –±–µ—Ä–ª–æ–≥–µ –∑–∏–º–æ–π", answer: "–º–µ–¥–≤–µ–¥—å", subject: "riddles" },
                { text: "–ö—Ç–æ –º–æ–ª–æ–∫–æ –¥–∞–µ—Ç?", answer: "–∫–æ—Ä–æ–≤–∞", subject: "riddles" },
                { text: "–£ –∫–æ–≥–æ –µ—Å—Ç—å –ø—è—Ç–∞—á–æ–∫?", answer: "—Å–≤–∏–Ω—å—è", subject: "riddles" },
                { text: "–ö—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç '–º—è—É'?", answer: "–∫–æ—à–∫–∞", subject: "riddles" },
                { text: "–ö—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç '–≥–∞–≤'?", answer: "—Å–æ–±–∞–∫–∞", subject: "riddles" },
                { text: "–ó–æ–ª–æ—Ç–æ–µ —è–±–ª–æ—á–∫–æ –ø–æ –Ω–µ–±—É –∫–∞—Ç–∞–µ—Ç—Å—è", answer: "—Å–æ–ª–Ω—Ü–µ", subject: "riddles" },
                { text: "–ë–µ–ª–∞—è –≤–∞—Ç–∞ –ø–ª—ã–≤–µ—Ç –∫—É–¥–∞-—Ç–æ", answer: "–æ–±–ª–∞–∫–æ", subject: "riddles" },
                { text: "–ù–∞ —Å—Ç–µ–Ω–µ –≤–∏—Å–∏—Ç, –≤—Ä–µ–º—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç", answer: "—á–∞—Å—ã", subject: "riddles" },
                { text: "–ß–µ—Ç—ã—Ä–µ –Ω–æ–≥–∏, –∞ —Ö–æ–¥–∏—Ç—å –Ω–µ –º–æ–∂–µ—Ç", answer: "—Å—Ç–æ–ª", subject: "riddles" },
                { text: "–í—Å–µ–≥–¥–∞ –≤–æ —Ä—Ç—É, –∞ –Ω–µ –ø—Ä–æ–≥–ª–æ—Ç–∏—à—å", answer: "—è–∑—ã–∫", subject: "riddles" },
                { text: "–ü—è—Ç—å –±—Ä–∞—Ç—å–µ–≤ –≤ –æ–¥–Ω–æ–º –¥–æ–º–∏–∫–µ –∂–∏–≤—É—Ç", answer: "–ø–∞–ª—å—Ü—ã", subject: "riddles" },
                { text: "–ö—Ä—É–≥–ª—ã–π, —Ä—É–º—è–Ω—ã–π, –≤ –ø–µ—á–∏ –ø–µ—á–µ–Ω", answer: "—Ö–ª–µ–±", subject: "riddles" },
                { text: "–ö—Ä–∞—Å–Ω–∞—è –¥–µ–≤–∏—Ü–∞ —Å–∏–¥–∏—Ç –≤ —Ç–µ–º–Ω–∏—Ü–µ", answer: "–º–æ—Ä–∫–æ–≤—å", subject: "riddles" }
            ]
        };

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        Object.entries(fallbackQuestions).forEach(([subjectId, questions]) => {
            this.questions.set(subjectId, questions);
        });
        
        this.loaded = true;
        this.log('‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    }

    getRandomQuestion(subjects) {
        if (!this.loaded) {
            throw new Error('–í–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        }

        if (!subjects || subjects.length === 0) {
            throw new Error('–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã');
        }

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        const allQuestions = [];
        
        subjects.forEach(subjectId => {
            const subjectQuestions = this.questions.get(subjectId);
            if (subjectQuestions && subjectQuestions.length > 0) {
                allQuestions.push(...subjectQuestions);
            }
        });

        if (allQuestions.length === 0) {
            throw new Error(`–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${subjects.join(', ')}`);
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        const randomIndex = Math.floor(Math.random() * allQuestions.length);
        const questionData = allQuestions[randomIndex];
        
        return {
            text: questionData.text,
            answer: questionData.answer,
            subject: questionData.subject,
            subjectName: this.getSubjectName(questionData.subject)
        };
    }

    checkAnswer(userAnswer, correctAnswer) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const normalizeAnswer = (answer) => {
            return answer.toString().toLowerCase().trim()
                .replace(/[^\w\s–∞-—è—ë]/gi, '')
                .replace(/\s+/g, ' ');
        };

        const normalizedUser = normalizeAnswer(userAnswer);
        const normalizedCorrect = normalizeAnswer(correctAnswer);

        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (normalizedUser === normalizedCorrect) {
            return true;
        }

        // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if (!isNaN(normalizedUser) && !isNaN(normalizedCorrect)) {
            return parseFloat(normalizedUser) === parseFloat(normalizedCorrect);
        }

        // –ù–µ—á–µ—Ç–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞)
        return this.fuzzyMatch(normalizedUser, normalizedCorrect, 0.8);
    }

    fuzzyMatch(str1, str2, threshold = 0.8) {
        if (str1.length === 0) return str2.length === 0;
        if (str2.length === 0) return false;

        const matrix = [];

        for (let i = 0; i <= str2.length; i++) {
            matrix[i] = [i];
        }

        for (let j = 0; j <= str1.length; j++) {
            matrix[0][j] = j;
        }

        for (let i = 1; i <= str2.length; i++) {
            for (let j = 1; j <= str1.length; j++) {
                if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
                    matrix[i][j] = matrix[i - 1][j - 1];
                } else {
                    matrix[i][j] = Math.min(
                        matrix[i - 1][j - 1] + 1,
                        matrix[i][j - 1] + 1,
                        matrix[i - 1][j] + 1
                    );
                }
            }
        }

        const distance = matrix[str2.length][str1.length];
        const maxLength = Math.max(str1.length, str2.length);
        const similarity = 1 - (distance / maxLength);

        return similarity >= threshold;
    }

    getSubjectName(subjectId) {
        return this.subjectsConfig?.subjects[subjectId]?.name || subjectId;
    }

    getAvailableSubjects() {
        if (!this.subjectsConfig) return [];
        
        return Object.entries(this.subjectsConfig.subjects).map(([id, info]) => ({
            id,
            name: info.name,
            description: info.description,
            icon: info.icon,
            difficulty: info.difficulty,
            estimatedTime: info.estimatedTime
        }));
    }

    getDefaultSubjects() {
        return this.subjectsConfig?.defaultSelected || ['math', 'russian'];
    }

    getQuestionsCount(subjectId) {
        const questions = this.questions.get(subjectId);
        return questions ? questions.length : 0;
    }

    getTotalQuestionsCount() {
        let total = 0;
        this.questions.forEach(questions => {
            total += questions.length;
        });
        return total;
    }

    getLoadingStatistics() {
        const stats = {
            totalSubjects: this.questions.size,
            totalQuestions: this.getTotalQuestionsCount(),
            subjectDetails: {}
        };

        this.questions.forEach((questions, subjectId) => {
            stats.subjectDetails[subjectId] = {
                name: this.getSubjectName(subjectId),
                questionsCount: questions.length
            };
        });

        return stats;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    searchQuestions(searchTerm, subjects = null) {
        const results = [];
        const searchLower = searchTerm.toLowerCase();
        
        const subjectsToSearch = subjects || Array.from(this.questions.keys());
        
        subjectsToSearch.forEach(subjectId => {
            const subjectQuestions = this.questions.get(subjectId);
            if (subjectQuestions) {
                subjectQuestions.forEach((q, index) => {
                    if (q.text.toLowerCase().includes(searchLower) ||
                        q.answer.toLowerCase().includes(searchLower)) {
                        results.push({
                            subject: subjectId,
                            subjectName: this.getSubjectName(subjectId),
                            index,
                            text: q.text,
                            answer: q.answer
                        });
                    }
                });
            }
        });

        return results;
    }
}
