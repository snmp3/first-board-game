export class EventHandler {
    constructor(game) {
        this.game = game;
        this.boundHandlers = new Map();
        this.initialized = false;
        this.retryCount = 0;
        this.maxRetries = 10;
        this.debug = true;
    }

    log(...args) {
        if (this.debug) {
            console.log('[EventHandler]', ...args);
        }
    }

    error(...args) {
        console.error('[EventHandler]', ...args);
    }

    setupEventListeners() {
        if (this.initialized) {
            this.log('EventHandler —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return true;
        }

        this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        // –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if (document.readyState === 'loading') {
            this.log('DOM –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –∂–¥–µ–º...');
            document.addEventListener('DOMContentLoaded', () => {
                this.initializeHandlers();
            });
        } else {
            this.initializeHandlers();
        }
        
        return true;
    }

    initializeHandlers() {
        this.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const requiredElements = [
            'add-player', 'add-bot', 'start-game', 'reset-game',
            'player-name', 'bot-difficulty', 'bot-name'
        ];

        const missingElements = requiredElements.filter(id => {
            const element = document.getElementById(id);
            if (!element) {
                this.error(`–≠–ª–µ–º–µ–Ω—Ç ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return true;
            }
            return false;
        });

        if (missingElements.length > 0) {
            this.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã:', missingElements);
            
            if (this.retryCount < this.maxRetries) {
                this.retryCount++;
                this.log(`–ü–æ–ø—ã—Ç–∫–∞ ${this.retryCount}/${this.maxRetries} —á–µ—Ä–µ–∑ 200ms...`);
                setTimeout(() => this.initializeHandlers(), 200);
                return;
            } else {
                this.error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
                return;
            }
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        try {
            this.setupMenuEvents();
            this.setupGameEvents();
            this.setupKeyboardEvents();
            this.setupThemeCheckboxes();
            
            this.initialized = true;
            this.log('‚úÖ EventHandler –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç
            this.validateHandlers();
            
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:', error);
        }
    }

    setupMenuEvents() {
        this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–µ–Ω—é...');
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        this.addEventHandler('add-player', 'click', (e) => {
            e.preventDefault();
            e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
            
            this.log('üî• –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ (EventHandler)');
            
            const nameInput = document.getElementById('player-name');
            if (!nameInput) {
                this.error('–ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
            const name = nameInput.value ? nameInput.value.trim() : '';
            this.log(`–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –∏–∑ –ø–æ–ª—è: "${name}" (–¥–ª–∏–Ω–∞: ${name.length})`);
            
            if (!name || name.length === 0) {
                this.log('‚ùå –ò–º—è –ø—É—Å—Ç–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ');
                alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞!');
                nameInput.focus();
                return;
            }
            
            if (this.game.gameState.players.length >= 4) {
                alert('–ú–∞–∫—Å–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞!');
                return;
            }
            
            try {
                const addedPlayer = this.game.addPlayer(name, false);
                if (addedPlayer) {
                    nameInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                    nameInput.focus();
                    this.updateStartButtonState();
                    this.log(`‚úÖ –ò–≥—Ä–æ–∫ "${name}" –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                } else {
                    this.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ "${name}"`);
                }
            } catch (error) {
                this.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
                alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞');
            }
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞
        this.addEventHandler('add-bot', 'click', (e) => {
            e.preventDefault();
            e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
            
            this.log('ü§ñ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ (EventHandler)');
            
            const botNameInput = document.getElementById('bot-name');
            const difficultySelect = document.getElementById('bot-difficulty');
            
            if (!difficultySelect) {
                this.error('–°–µ–ª–µ–∫—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
            const botName = botNameInput && botNameInput.value ? botNameInput.value.trim() : '';
            const difficulty = difficultySelect.value || 'medium';
            
            // –ï—Å–ª–∏ –∏–º—è –±–æ—Ç–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è
            const finalBotName = botName || this.generateBotName();
            
            this.log(`–î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞: –∏–º—è="${finalBotName}", —Å–ª–æ–∂–Ω–æ—Å—Ç—å="${difficulty}"`);
            
            if (this.game.gameState.players.length >= 4) {
                alert('–ú–∞–∫—Å–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞!');
                return;
            }
            
            try {
                const addedBot = this.game.addPlayer(finalBotName, true, difficulty);
                if (addedBot) {
                    if (botNameInput) {
                        botNameInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                    }
                    this.updateStartButtonState();
                    this.log(`‚úÖ –ë–æ—Ç "${finalBotName}" (${difficulty}) –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                } else {
                    this.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ "${finalBotName}"`);
                }
            } catch (error) {
                this.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞:', error);
                alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞');
            }
        });

        // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
        this.addEventHandler('start-game', 'click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            this.log('üéÆ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã (EventHandler)');
            
            if (this.game.gameState.players.length === 0) {
                alert('–î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã!');
                return;
            }
            
            const selectedThemes = this.getSelectedThemes();
            if (selectedThemes.length === 0) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–æ–≤!');
                return;
            }
            
            try {
                this.game.updateThemes(selectedThemes);
                this.game.startGame();
                this.log('‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞');
            } catch (error) {
                this.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã:', error);
                alert('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
            }
        });

        // –°–±—Ä–æ—Å –∏–≥—Ä—ã
        this.addEventHandler('reset-game', 'click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            this.log('üîÑ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã (EventHandler)');
            
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë?')) {
                try {
                    this.game.resetGame();
                    this.updateStartButtonState();
                    this.log('‚úÖ –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
                } catch (error) {
                    this.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã:', error);
                    alert('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã');
                }
            }
        });

        // Enter –≤ –ø–æ–ª–µ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
        this.addEventHandler('player-name', 'keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                const addButton = document.getElementById('add-player');
                if (addButton) {
                    this.log('Enter –≤ –ø–æ–ª–µ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞, –∏–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫');
                    addButton.click();
                }
            }
        });

        // Enter –≤ –ø–æ–ª–µ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
        this.addEventHandler('bot-name', 'keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                const addBotButton = document.getElementById('add-bot');
                if (addBotButton) {
                    this.log('Enter –≤ –ø–æ–ª–µ –∏–º–µ–Ω–∏ –±–æ—Ç–∞, –∏–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫');
                    addBotButton.click();
                }
            }
        });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –±–æ—Ç–∞
    generateBotName() {
        const botNames = [
            '–†–æ–±–æ—Ç', '–ê–Ω–¥—Ä–æ–∏–¥', '–ö–∏–±–æ—Ä–≥', '–î—Ä–æ–∏–¥', '–ë–æ—Ç-2000',
            '–£–º–Ω–∏–∫', '–ú—ã—Å–ª–∏—Ç–µ–ª—å', '–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å', '–õ–æ–≥–∏–∫', '–ê–Ω–∞–ª–∏—Ç–∏–∫'
        ];
        const randomIndex = Math.floor(Math.random() * botNames.length);
        return botNames[randomIndex];
    }

    setupGameEvents() {
        this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π...');
        
        // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
        this.addEventHandler('roll-dice', 'click', (e) => {
            e.preventDefault();
            this.log('üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞');
            try {
                this.game.rollDice();
            } catch (error) {
                this.error('–û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞:', error);
            }
        });

        // –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        this.addEventHandler('move-player', 'click', (e) => {
            e.preventDefault();
            this.log('üö∂ –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞');
            try {
                this.game.moveCurrentPlayer();
            } catch (error) {
                this.error('–û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
            }
        });

        // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        this.addEventHandler('back-to-menu', 'click', (e) => {
            e.preventDefault();
            this.log('üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
            
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?')) {
                try {
                    this.game.resetGame();
                } catch (error) {
                    this.error('–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é:', error);
                }
            }
        });
    }

    setupKeyboardEvents() {
        this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...');
        
        document.addEventListener('keydown', (e) => {
            // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
            if (e.ctrlKey || e.metaKey) {
                switch (e.key) {
                    case 'r':
                        e.preventDefault();
                        if (confirm('–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É? (Ctrl+R)')) {
                            this.game.resetGame();
                        }
                        break;
                }
            }

            // –ü—Ä–æ–±–µ–ª –¥–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ –≤ –∏–≥—Ä–µ
            if (e.code === 'Space') {
                const currentScreen = this.game.screenManager.getCurrentScreen();
                if (currentScreen === 'game') {
                    e.preventDefault();
                    const rollButton = document.getElementById('roll-dice');
                    if (rollButton && !rollButton.disabled) {
                        rollButton.click();
                    }
                }
            }
        });
    }

    setupThemeCheckboxes() {
        this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤ —Ç–µ–º...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
        const themesContainer = document.querySelector('.themes-selection');
        if (!themesContainer) {
            this.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldHandler = this.boundHandlers.get('themes-container-change');
        if (oldHandler) {
            themesContainer.removeEventListener('change', oldHandler);
            this.boundHandlers.delete('themes-container-change');
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤ —Ç–µ–º
        const themeChangeHandler = (e) => {
            if (e.target.type === 'checkbox' && e.target.id.startsWith('theme-')) {
                const themeId = e.target.value;
                this.log(`üéØ –ò–∑–º–µ–Ω–µ–Ω–∞ —Ç–µ–º–∞: ${themeId} (${e.target.checked ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'})`);
                this.updateStartButtonState();
            }
        };

        themesContainer.addEventListener('change', themeChangeHandler);
        this.boundHandlers.set('themes-container-change', themeChangeHandler);
        
        this.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ —Ç–µ–º');
    }

    getSelectedThemes() {
        const themes = [];
        const checkboxes = document.querySelectorAll('input[id^="theme-"]:checked');
        
        checkboxes.forEach(checkbox => {
            themes.push(checkbox.value);
        });
        
        this.log('–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã:', themes);
        return themes;
    }

    updateStartButtonState() {
        const startButton = document.getElementById('start-game');
        if (!startButton) return;

        const hasPlayers = this.game.gameState.players.length > 0;
        const hasThemes = this.getSelectedThemes().length > 0;
        
        startButton.disabled = !hasPlayers || !hasThemes;
        
        this.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É":', {
            hasPlayers,
            hasThemes,
            disabled: startButton.disabled
        });
    }

    addEventHandler(elementId, eventType, handler) {
        const element = document.getElementById(elementId);
        if (!element) {
            this.error(`–≠–ª–µ–º–µ–Ω—Ç ${elementId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${eventType}`);
            return false;
        }

        // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π disabled –¥–ª—è –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏
        if (eventType === 'click' && element.tagName === 'BUTTON') {
            if (['add-player', 'add-bot', 'reset-game'].includes(elementId)) {
                element.disabled = false;
                element.style.pointerEvents = 'auto';
                element.style.opacity = '1';
            }
        }

        const key = `${elementId}-${eventType}`;
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.boundHandlers.has(key)) {
            this.removeEventHandler(elementId, eventType);
        }

        // –ù–ï –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º handler –Ω–∞–ø—Ä—è–º—É—é
        this.boundHandlers.set(key, handler);
        element.addEventListener(eventType, handler);
        
        this.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ${eventType} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${elementId}`);
        return true;
    }

    removeEventHandler(elementId, eventType) {
        const element = document.getElementById(elementId);
        const key = `${elementId}-${eventType}`;
        
        if (element && this.boundHandlers.has(key)) {
            const handler = this.boundHandlers.get(key);
            element.removeEventListener(eventType, handler);
            this.boundHandlers.delete(key);
            this.log(`–û–±—Ä–∞–±–æ—Ç—á–∏–∫ ${eventType} —É–¥–∞–ª–µ–Ω –¥–ª—è ${elementId}`);
            return true;
        }
        
        return false;
    }

    validateHandlers() {
        this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...');
        
        const requiredHandlers = [
            'add-player-click',
            'add-bot-click', 
            'start-game-click',
            'reset-game-click'
        ];
        
        const missingHandlers = requiredHandlers.filter(key => 
            !this.boundHandlers.has(key)
        );
        
        if (missingHandlers.length > 0) {
            this.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:', missingHandlers);
        } else {
            this.log('‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã
        const buttons = ['add-player', 'add-bot', 'reset-game'];
        buttons.forEach(id => {
            const btn = document.getElementById(id);
            if (btn) {
                this.log(`–ö–Ω–æ–ø–∫–∞ ${id}:`, {
                    disabled: btn.disabled,
                    style: btn.style.pointerEvents,
                    hasHandler: this.boundHandlers.has(`${id}-click`)
                });
            }
        });
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
    updatePlayersList() {
        this.updateStartButtonState();
    }

    updateGameControls(currentPlayer, diceValue) {
        const rollButton = document.getElementById('roll-dice');
        const moveButton = document.getElementById('move-player');
        
        if (rollButton && moveButton) {
            if (currentPlayer?.isBot) {
                rollButton.disabled = true;
                moveButton.disabled = true;
            } else {
                rollButton.disabled = !!diceValue;
                moveButton.disabled = !diceValue;
            }
        }
    }

    cleanup() {
        this.log('–û—á–∏—Å—Ç–∫–∞ EventHandler...');
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.boundHandlers.forEach((handler, key) => {
            const [elementId, eventType] = key.split('-');
            this.removeEventHandler(elementId, eventType);
        });
        
        this.boundHandlers.clear();
        this.initialized = false;
        
        this.log('EventHandler –æ—á–∏—â–µ–Ω');
    }
}
