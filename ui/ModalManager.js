export class ModalManager {
    constructor() {
        this.initialized = false;
        this.currentModal = null;
        this.autoCloseTimer = null;
        this.debug = true;
    }

    log(...args) {
        if (this.debug) {
            console.log('[ModalManager]', ...args);
        }
    }

    error(...args) {
        console.error('[ModalManager]', ...args);
    }

    initialize() {
        this.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ModalManager...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.questionModal = document.getElementById('question-modal');
        this.messageModal = document.getElementById('message-modal');
        this.resultsModal = document.getElementById('results-modal');
        
        if (!this.questionModal || !this.messageModal || !this.resultsModal) {
            this.error('–ù–µ –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –Ω–∞–π–¥–µ–Ω—ã –≤ DOM');
            return false;
        }
        
        this.setupEventListeners();
        this.initialized = true;
        this.log('‚úÖ ModalManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        return true;
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞
        const submitAnswerBtn = document.getElementById('submit-answer');
        const skipQuestionBtn = document.getElementById('skip-question');
        const answerInput = document.getElementById('answer-input');
        
        if (submitAnswerBtn) {
            submitAnswerBtn.addEventListener('click', () => {
                this.submitAnswer();
            });
        }
        
        if (skipQuestionBtn) {
            skipQuestionBtn.addEventListener('click', () => {
                this.skipQuestion();
            });
        }
        
        if (answerInput) {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤–≤–æ–¥ —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã
            answerInput.addEventListener('keypress', (e) => {
                // –†–∞–∑—Ä–µ—à–∞–µ–º –≤–≤–æ–¥ –í–°–ï–• —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã
                if (e.key === 'Enter') {
                    e.preventDefault();
                    this.submitAnswer();
                }
                // –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã
            });
            
            // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ paste (–≤—Å—Ç–∞–≤–∫—É)
            answerInput.addEventListener('paste', (e) => {
                // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å—Ç–∞–≤–∫—É –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            });
            
            // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ input
            answerInput.addEventListener('input', (e) => {
                // –†–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±–æ–π –≤–≤–æ–¥
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        const closeMessageBtn = document.getElementById('close-message');
        if (closeMessageBtn) {
            closeMessageBtn.addEventListener('click', () => {
                this.closeCurrentModal();
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const closeResultsBtn = document.getElementById('close-results');
        if (closeResultsBtn) {
            closeResultsBtn.addEventListener('click', () => {
                this.closeCurrentModal();
            });
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
        [this.questionModal, this.messageModal, this.resultsModal].forEach(modal => {
            if (modal) {
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        this.closeCurrentModal();
                    }
                });
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∞–≤–∏—à–µ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.currentModal) {
                this.closeCurrentModal();
            }
        });
    }

    showQuestion(questionText, answerCallback) {
        this.log('–ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞:', questionText);
        
        this.closeCurrentModal();
        
        const questionTextElement = document.getElementById('question-text');
        const answerInput = document.getElementById('answer-input');
        
        if (questionTextElement) {
            questionTextElement.textContent = questionText;
        }
        
        if (answerInput) {
            answerInput.value = '';
            answerInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã)';
        }
        
        this.answerCallback = answerCallback;
        this.showModal(this.questionModal);
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        setTimeout(() => {
            if (answerInput) {
                answerInput.focus();
            }
        }, 100);
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –±–æ—Ç–æ–≤ –∏ –∏–≥—Ä–æ–∫–æ–≤
    showMessage(title, message, callback = null, options = {}) {
        const { 
            autoClose = false, 
            autoCloseDelay = 1000, 
            isBot = false 
        } = options;
        
        this.log(`–ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: ${title} (–∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ: ${autoClose}, –±–æ—Ç: ${isBot})`);
        
        this.closeCurrentModal();
        
        const titleElement = document.getElementById('message-title');
        const messageElement = document.getElementById('message-text');
        
        if (titleElement) {
            titleElement.textContent = title;
        }
        
        if (messageElement) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            messageElement.innerHTML = message.replace(/\n/g, '<br>');
        }
        
        this.messageCallback = callback;
        this.showModal(this.messageModal);
        
        // –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è –±–æ—Ç–æ–≤ –∏–ª–∏ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –∏–≥—Ä–æ–∫–∞
        if (autoClose) {
            this.log(`–ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ ${autoCloseDelay}ms`);
            this.autoCloseTimer = setTimeout(() => {
                this.log('–ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
                this.closeCurrentModal();
            }, autoCloseDelay);
        }
    }

    showResults(resultsHTML, callback = null) {
        this.log('–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã');
        
        this.closeCurrentModal();
        
        const resultsContent = document.getElementById('results-content');
        if (resultsContent) {
            resultsContent.innerHTML = resultsHTML;
        }
        
        this.resultsCallback = callback;
        this.showModal(this.resultsModal);
    }

    showModal(modal) {
        if (!modal) return false;
        
        this.currentModal = modal;
        modal.classList.add('active');
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.body.style.overflow = 'hidden';
        
        return true;
    }

    closeCurrentModal() {
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è
        if (this.autoCloseTimer) {
            clearTimeout(this.autoCloseTimer);
            this.autoCloseTimer = null;
            this.log('–¢–∞–π–º–µ—Ä –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è –æ—á–∏—â–µ–Ω');
        }
        
        if (!this.currentModal) return;
        
        this.currentModal.classList.remove('active');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.body.style.overflow = '';
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º callback –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if (this.currentModal === this.messageModal && this.messageCallback) {
            this.messageCallback();
            this.messageCallback = null;
        } else if (this.currentModal === this.resultsModal && this.resultsCallback) {
            this.resultsCallback();
            this.resultsCallback = null;
        }
        
        this.currentModal = null;
    }

    submitAnswer() {
        const answerInput = document.getElementById('answer-input');
        if (!answerInput || !this.answerCallback) return;
        
        const answer = answerInput.value.trim(); // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –æ—Ç–≤–µ—Ç–µ
        this.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞:', answer);
        
        if (answer === '') {
            this.log('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ');
            answerInput.placeholder = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç';
            answerInput.style.borderColor = '#e74c3c';
            answerInput.focus();
            return;
        }
        
        this.closeCurrentModal();
        
        if (this.answerCallback) {
            this.answerCallback(answer);
            this.answerCallback = null;
        }
    }

    skipQuestion() {
        this.log('–ü—Ä–æ–ø—É—Å–∫ –≤–æ–ø—Ä–æ—Å–∞');
        this.closeCurrentModal();
        
        if (this.answerCallback) {
            this.answerCallback(''); // –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫
            this.answerCallback = null;
        }
    }

    isOpen() {
        return this.currentModal !== null;
    }

    getCurrentModal() {
        return this.currentModal;
    }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    showSuccessMessage(message, callback = null, autoClose = true) {
        this.showMessage(
            '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ', 
            message, 
            callback, 
            { autoClose, autoCloseDelay: 1000 }
        );
    }

    showErrorMessage(message, callback = null, autoClose = false) {
        this.showMessage(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üòî', 
            message, 
            callback, 
            { autoClose, autoCloseDelay: 1000 }
        );
    }

    showBotMessage(title, message, callback = null) {
        this.showMessage(
            title, 
            message, 
            callback, 
            { autoClose: true, autoCloseDelay: 1000, isBot: true }
        );
    }

    showInfoMessage(title, message, callback = null) {
        this.showMessage(title, message, callback, { autoClose: false });
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getDebugInfo() {
        return {
            initialized: this.initialized,
            currentModal: this.currentModal?.id || null,
            hasAutoCloseTimer: !!this.autoCloseTimer,
            modalStates: {
                question: this.questionModal?.classList.contains('active') || false,
                message: this.messageModal?.classList.contains('active') || false,
                results: this.resultsModal?.classList.contains('active') || false
            }
        };
    }
}
