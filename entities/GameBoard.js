import { JUMP_CELLS } from '../core/Constants.js';

export class GameBoard {
    constructor() {
        this.rows = 10;
        this.columns = 12;
        this.totalCells = 120;
        
        // –í–ê–ñ–ù–û: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º 1-based –¥–∞–Ω–Ω—ã–µ –≤ 0-based –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏
        this.jumpCells = {};
        Object.entries(JUMP_CELLS).forEach(([from, to]) => {
            this.jumpCells[parseInt(from) - 1] = parseInt(to) - 1;
        });
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (0-based)
        this.specialCells = new Set(Object.keys(this.jumpCells).map(Number));
        
        this.debug = true;
        
        this.log('GameBoard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.log('–ö–ª–µ—Ç–∫–∏-–ø—Ä—ã–≥–∞–ª–∫–∏ (0-based –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏):', this.jumpCells);
        this.log('–ö–ª–µ—Ç–∫–∏-–ø—Ä—ã–≥–∞–ª–∫–∏ (1-based –∫–∞–∫ –≤–∏–¥—è—Ç –∏–≥—Ä–æ–∫–∏):', JUMP_CELLS);
        this.log('–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ (0-based):', [...this.specialCells]);
    }

    log(...args) {
        if (this.debug) {
            console.log('[GameBoard]', ...args);
        }
    }

    error(...args) {
        console.error('[GameBoard]', ...args);
    }

    // –û–°–ù–û–í–ù–û–ô –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–∞ –ø—Ä—ã–∂–∫–∞ (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç 0-based –ø–æ–∑–∏—Ü–∏—é)
    getJumpDestination(position) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
        if (position < 0 || position >= this.totalCells) {
            this.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: ${position}`);
            return null;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä—ã–∂–∫–∞ (0-based)
        const destination = this.jumpCells[position];
        
        if (destination !== undefined) {
            const isLadder = destination > position;
            this.log(`üéØ –ü—Ä—ã–∂–æ–∫ —Å –ø–æ–∑–∏—Ü–∏–∏ ${position + 1} –Ω–∞ ${destination + 1} (${isLadder ? '–ª–µ—Å—Ç–Ω–∏—Ü–∞' : '–∑–º–µ—è'})`);
            return destination;
        }
        
        // –ï—Å–ª–∏ –ø—Ä—ã–∂–∫–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        return null;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–µ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π (0-based –ø–æ–∑–∏—Ü–∏—è)
    isSpecialCell(position) {
        return this.specialCells.has(position);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–ª–µ—Ç–∫–∏ (0-based –ø–æ–∑–∏—Ü–∏—è)
    getSpecialCellType(position) {
        const destination = this.jumpCells[position];
        if (destination === undefined) {
            return null;
        }
        
        return destination > position ? 'ladder' : 'snake';
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–µ—Å—Ç–Ω–∏—Ü (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1-based –Ω–æ–º–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    getLadders() {
        const ladders = [];
        for (const [from, to] of Object.entries(this.jumpCells)) {
            if (parseInt(to) > parseInt(from)) {
                ladders.push({ 
                    from: parseInt(from) + 1, 
                    to: parseInt(to) + 1, 
                    type: 'ladder' 
                });
            }
        }
        return ladders;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–º–µ–π (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1-based –Ω–æ–º–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    getSnakes() {
        const snakes = [];
        for (const [from, to] of Object.entries(this.jumpCells)) {
            if (parseInt(to) < parseInt(from)) {
                snakes.push({ 
                    from: parseInt(from) + 1, 
                    to: parseInt(to) + 1, 
                    type: 'snake' 
                });
            }
        }
        return snakes;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–µ—Å—Ç–Ω–∏—Ü –∏ –∑–º–µ–π (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1-based –Ω–æ–º–µ—Ä–∞)
    getSnakesAndLadders() {
        return [...this.getLadders(), ...this.getSnakes()];
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ (0-based)
    isValidPosition(position) {
        return position >= 0 && position < this.totalCells;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–ª–µ—Ç–∫–∏ –≤ —Å–µ—Ç–∫–µ (0-based –ø–æ–∑–∏—Ü–∏—è)
    getCellCoordinates(position) {
        if (!this.isValidPosition(position)) {
            return null;
        }
        
        const row = Math.floor(position / this.columns);
        let col;
        
        // –£—á–∏—Ç—ã–≤–∞–µ–º –∑–º–µ–π–∫—É
        if (row % 2 === 0) {
            col = position % this.columns;
        } else {
            col = this.columns - 1 - (position % this.columns);
        }
        
        return { row, col };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0-based –ø–æ–∑–∏—Ü–∏—é)
    getPositionFromCoordinates(row, col) {
        if (row < 0 || row >= this.rows || col < 0 || col >= this.columns) {
            return null;
        }
        
        let position;
        if (row % 2 === 0) {
            position = row * this.columns + col;
        } else {
            position = row * this.columns + (this.columns - 1 - col);
        }
        
        return position;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è —Ñ–∏–Ω–∏—à–Ω–æ–π (0-based)
    isWinPosition(position) {
        return position >= this.totalCells - 1;
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    getDebugInfo() {
        return {
            totalCells: this.totalCells,
            rows: this.rows,
            columns: this.columns,
            jumpCellsCount: Object.keys(this.jumpCells).length,
            specialCellsCount: this.specialCells.size,
            jumpCells0Based: this.jumpCells,
            jumpCells1Based: JUMP_CELLS,
            ladders: this.getLadders(),
            snakes: this.getSnakes()
        };
    }

    // –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä—ã–∂–∫–æ–≤
    testJumps() {
        this.log('=== –¢–ï–°–¢ –ü–†–´–ñ–ö–û–í ===');
        
        Object.entries(JUMP_CELLS).forEach(([from1Based, to1Based]) => {
            const from0Based = parseInt(from1Based) - 1;
            const to0Based = parseInt(to1Based) - 1;
            const type = to0Based > from0Based ? '–ª–µ—Å—Ç–Ω–∏—Ü–∞' : '–∑–º–µ—è';
            
            this.log(`${type}: –∫–ª–µ—Ç–∫–∞ ${from1Based} ‚Üí –∫–ª–µ—Ç–∫–∞ ${to1Based} (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ: ${from0Based} ‚Üí ${to0Based})`);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ getJumpDestination (–ø–µ—Ä–µ–¥–∞–µ–º 0-based)
            const result = this.getJumpDestination(from0Based);
            if (result !== to0Based) {
                this.error(`–û–®–ò–ë–ö–ê: –æ–∂–∏–¥–∞–ª–∏ ${to0Based}, –ø–æ–ª—É—á–∏–ª–∏ ${result}`);
            } else {
                this.log(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª –¥–ª—è –∫–ª–µ—Ç–∫–∏ ${from1Based}`);
            }
        });
        
        this.log('=== –ö–û–ù–ï–¶ –¢–ï–°–¢–ê ===');
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–ª–µ—Ç–∫–∏ (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç 1-based –Ω–æ–º–µ—Ä)
    testSpecificCell(cellNumber1Based) {
        const cellNumber0Based = cellNumber1Based - 1;
        this.log(`üß™ –¢–ï–°–¢ –ö–õ–ï–¢–ö–ò ${cellNumber1Based} (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ: ${cellNumber0Based})`);
        
        const destination = this.getJumpDestination(cellNumber0Based);
        if (destination !== null) {
            this.log(`‚úÖ –ü—Ä—ã–∂–æ–∫ –Ω–∞–π–¥–µ–Ω: –∫–ª–µ—Ç–∫–∞ ${cellNumber1Based} ‚Üí –∫–ª–µ—Ç–∫–∞ ${destination + 1}`);
            return destination + 1; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 1-based –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        } else {
            this.log(`‚ùå –ü—Ä—ã–∂–∫–∞ –Ω–µ—Ç –¥–ª—è –∫–ª–µ—Ç–∫–∏ ${cellNumber1Based}`);
            return null;
        }
    }
}
