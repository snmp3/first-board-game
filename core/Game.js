import { GameState } from './GameState.js';
import { GameBoard } from '../entities/GameBoard.js';
import { QuestionLoader } from '../data/QuestionLoader.js';
import { CanvasRenderer } from '../rendering/CanvasRenderer.js';
import { ScreenManager } from '../ui/ScreenManager.js';
import { ModalManager } from '../ui/ModalManager.js';
import { EventHandler } from '../ui/EventHandler.js';
import { GAME_CONFIG, BOT_DIFFICULTY, SCREENS } from './Constants.js';

export class Game {
    constructor() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        this.gameState = new GameState();
        this.gameBoard = new GameBoard();
        this.questionLoader = new QuestionLoader();
        this.canvasRenderer = null;
        this.screenManager = new ScreenManager();
        this.modalManager = new ModalManager();
        this.eventHandler = new EventHandler(this);
        
        // –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.selectedThemes = new Set(['math', 'geography']);
        this.currentQuestion = null;
        this.dice = null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.initialized = false;
        this.debug = true;
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ—Ç–æ–¥–æ–≤
        this.handleAnswer = this.handleAnswer.bind(this);
        this.handleBotAnswer = this.handleBotAnswer.bind(this);
        this.askQuestion = this.askQuestion.bind(this);
    }

    log(...args) {
        if (this.debug) {
            console.log('[Game]', ...args);
        }
    }

    error(...args) {
        console.error('[Game]', ...args);
    }

    async initialize() {
        try {
            this.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
            
            // –û–∂–∏–¥–∞–µ–º –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
            await this.waitForDOMReady();
            this.log('‚úÖ DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤');
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç DOM)
            this.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...');
            const questionsLoaded = await this.questionLoader.loadQuestions();
            if (!questionsLoaded) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã');
            }
            this.log('‚úÖ –í–æ–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Canvas —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç DOM –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ)
            this.canvasRenderer = new CanvasRenderer();
            this.log('‚úÖ CanvasRenderer —Å–æ–∑–¥–∞–Ω');
            
            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            await this.waitForCriticalElements();
            this.log('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
            
            // –¢–û–õ–¨–ö–û –ü–û–°–õ–ï —ç—Ç–æ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç DOM
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç–∫—Ä–∞–Ω–æ–≤
            this.screenManager.initialize();
            this.log('‚úÖ ScreenManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
            this.modalManager.initialize();
            this.log('‚úÖ ModalManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.log('üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
            this.eventHandler.setupEventListeners();
            this.log('‚úÖ EventHandler –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            
            // –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            const menuShown = this.screenManager.showScreen(SCREENS.MENU);
            if (!menuShown) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
            }
            this.log('‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ');
            
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã —ç–∫—Ä–∞–Ω–∞
            this.screenManager.onScreenChange((event) => {
                this.log(`–ü–µ—Ä–µ—Ö–æ–¥ —ç–∫—Ä–∞–Ω–∞: ${event.detail.from} ‚Üí ${event.detail.to}`);
                this.handleScreenChange(event.detail.from, event.detail.to);
            });
            
            this.initialized = true;
            this.log('üéâ –ò–≥—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
            return true;
        } catch (error) {
            this.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã:', error);
            throw error;
        }
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
    waitForDOMReady() {
        return new Promise((resolve) => {
            if (document.readyState === 'complete') {
                resolve();
            } else if (document.readyState === 'interactive') {
                // DOM –≥–æ—Ç–æ–≤, –Ω–æ —Ä–µ—Å—É—Ä—Å—ã –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
                setTimeout(resolve, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            } else {
                // DOM –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
                const handleReady = () => {
                    document.removeEventListener('DOMContentLoaded', handleReady);
                    setTimeout(resolve, 100);
                };
                document.addEventListener('DOMContentLoaded', handleReady);
            }
        });
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    waitForCriticalElements() {
        return new Promise((resolve, reject) => {
            const criticalElements = [
                'menu',           // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                'game',           // –ò–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω  
                'add-player',     // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
                'players-list'    // –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
            ];
            
            let attempts = 0;
            const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
            
            const checkElements = () => {
                attempts++;
                
                const missingElements = criticalElements.filter(id => {
                    const element = document.getElementById(id);
                    return !element;
                });
                
                if (missingElements.length === 0) {
                    this.log('–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', criticalElements);
                    resolve();
                } else if (attempts >= maxAttempts) {
                    this.error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', missingElements);
                    reject(new Error(`–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${missingElements.join(', ')}`));
                } else {
                    this.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}, –æ–∂–∏–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã:`, missingElements);
                    setTimeout(checkElements, 100);
                }
            };
            
            checkElements();
        });
    }

    handleScreenChange(from, to) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
        if (to === SCREENS.GAME && this.canvasRenderer) {
            // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Canvas
            setTimeout(() => {
                if (this.canvasRenderer.setupCanvas()) {
                    this.updateGameDisplay();
                }
            }, 100);
        }
    }

    async startGame() {
        try {
            if (this.gameState.players.length === 0) {
                this.modalManager.showMessage('–û—à–∏–±–∫–∞', '–î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã!');
                return false;
            }

            if (this.selectedThemes.size === 0) {
                this.modalManager.showMessage('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–æ–≤!');
                return false;
            }

            this.log('üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É...');
            this.log('–ò–≥—Ä–æ–∫–∏:', this.gameState.players.map(p => p.name));
            this.log('–¢–µ–º—ã:', [...this.selectedThemes]);

            this.gameState.gameStarted = true;
            this.gameState.gameEnded = false;
            
            // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
            this.screenManager.showScreen(SCREENS.GAME);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Ä–∞–Ω–∞
            await new Promise(resolve => setTimeout(resolve, 300));
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Canvas –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
            if (this.canvasRenderer && this.canvasRenderer.setupCanvas()) {
                this.updateGameDisplay();
                this.log('‚úÖ Canvas –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            } else {
                this.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Canvas');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateCurrentPlayerDisplay();
            this.updateGameControlsDisplay();
            
            this.log('üéâ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ–¥ –¥–ª—è –±–æ—Ç–∞, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ - –±–æ—Ç
            const currentPlayer = this.gameState.getCurrentPlayer();
            if (currentPlayer && currentPlayer.isBot) {
                setTimeout(() => this.rollDice(), 1500);
            }
            
            return true;
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã:', error);
            this.modalManager.showMessage('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
            return false;
        }
    }

    addPlayer(name, isBot = false, difficulty = 'medium') {
        try {
            if (this.gameState.players.length >= 4) {
                this.modalManager.showMessage('–í–Ω–∏–º–∞–Ω–∏–µ', '–ú–∞–∫—Å–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞!');
                return null;
            }

            if (!name || name.trim().length === 0) {
                this.modalManager.showMessage('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞!');
                return null;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —É–Ω–∏–∫–∞–ª—å–Ω–æ
            const existingNames = this.gameState.players.map(p => p.name.toLowerCase());
            if (existingNames.includes(name.toLowerCase())) {
                this.modalManager.showMessage('–í–Ω–∏–º–∞–Ω–∏–µ', '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
                return null;
            }

            const player = this.gameState.addPlayer(name.trim(), isBot, difficulty);
            this.updatePlayersDisplay();
            
            this.log(`üë§ –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ${player.name} ${isBot ? '(–ë–æ—Ç ' + difficulty + ')' : ''}`);
            
            return player;
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
            this.modalManager.showMessage('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞');
            return null;
        }
    }

    rollDice() {
        try {
            const currentPlayer = this.gameState.getCurrentPlayer();
            if (!currentPlayer) {
                this.error('–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞');
                return;
            }

            if (this.dice !== null) {
                this.log('–ö—É–±–∏–∫ —É–∂–µ –±—Ä–æ—à–µ–Ω:', this.dice);
                return;
            }

            this.dice = Math.floor(Math.random() * 6) + 1;
            this.log(`üé≤ ${currentPlayer.name} –±—Ä–æ—Å–∏–ª –∫—É–±–∏–∫: ${this.dice}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–±–∏–∫–∞
            this.updateDiceDisplay();
            this.updateGameControlsDisplay();
            
            // –î–ª—è –±–æ—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ–º —Ö–æ–¥
            if (currentPlayer.isBot) {
                setTimeout(() => this.moveCurrentPlayer(), 1000);
            }
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞:', error);
        }
    }

    moveCurrentPlayer() {
        try {
            const currentPlayer = this.gameState.getCurrentPlayer();
            if (!currentPlayer || this.dice === null) {
                this.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞', { currentPlayer, dice: this.dice });
                return;
            }

            this.log(`üö∂ ${currentPlayer.name} –¥–≤–∏–∂–µ—Ç—Å—è –Ω–∞ ${this.dice} –∫–ª–µ—Ç–æ–∫`);
            
            const oldPosition = currentPlayer.position;
            const newPosition = this.gameState.movePlayer(currentPlayer.id, this.dice);
            
            this.dice = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É–±–∏–∫
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ (–ª–µ—Å—Ç–Ω–∏—Ü—ã/–∑–º–µ–∏)
            const jumpDestination = this.gameBoard.getJumpDestination(newPosition);
            if (jumpDestination !== null) {
                const isLadder = jumpDestination > newPosition;
                currentPlayer.position = jumpDestination;
                
                const message = isLadder ? '–õ–µ—Å—Ç–Ω–∏—Ü–∞ –≤–≤–µ—Ä—Ö!' : '–ó–º–µ—è –≤–Ω–∏–∑!';
                this.modalManager.showMessage(
                    `${currentPlayer.name} –ø–æ–ø–∞–ª –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–µ—Ç–∫—É!`,
                    `${message} –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ${jumpDestination + 1}`,
                    () => this.continueAfterMove()
                );
                
                this.log(`ü™ú ${currentPlayer.name}: ${oldPosition + 1} ‚Üí ${newPosition + 1} ‚Üí ${jumpDestination + 1} (${message})`);
            } else {
                this.log(`üìç ${currentPlayer.name}: ${oldPosition + 1} ‚Üí ${newPosition + 1}`);
                this.continueAfterMove();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this.updateGameDisplay();
            
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
        }
    }

    continueAfterMove() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        const winner = this.gameState.checkWinner();
        if (winner) {
            this.endGame(winner);
            return;
        }

        // –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
        this.askQuestion();
    }

    async askQuestion() {
        try {
            const currentPlayer = this.gameState.getCurrentPlayer();
            if (!currentPlayer) return;

            this.log(`‚ùì –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫—É ${currentPlayer.name}`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º
            this.currentQuestion = this.questionLoader.getRandomQuestion([...this.selectedThemes]);
            
            if (currentPlayer.isBot) {
                await this.handleBotAnswer();
            } else {
                this.modalManager.showQuestion(
                    this.currentQuestion.text,
                    this.handleAnswer
                );
            }
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:', error);
            this.modalManager.showMessage('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å');
            this.nextTurn();
        }
    }

    async handleBotAnswer() {
        try {
            const currentPlayer = this.gameState.getCurrentPlayer();
            if (!currentPlayer || !this.currentQuestion) return;

            const difficulty = BOT_DIFFICULTY[currentPlayer.difficulty] || BOT_DIFFICULTY.medium;
            
            this.log(`ü§ñ –ë–æ—Ç ${currentPlayer.name} –¥—É–º–∞–µ—Ç... (${difficulty.thinkTime}ms)`);
            
            // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
            await new Promise(resolve => setTimeout(resolve, difficulty.thinkTime));
            
            const isCorrect = Math.random() < difficulty.correctChance;
            const answer = isCorrect ? this.currentQuestion.answer : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞';
            
            this.log(`ü§ñ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç: "${answer}" (${isCorrect ? '–ø—Ä–∞–≤–∏–ª—å–Ω–æ' : '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'})`);
            
            this.handleAnswer(answer);
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞:', error);
            this.nextTurn();
        }
    }

    handleAnswer(userAnswer) {
        try {
            const currentPlayer = this.gameState.getCurrentPlayer();
            if (!currentPlayer || !this.currentQuestion) {
                this.error('–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞');
                return;
            }

            currentPlayer.questionsAnswered++;
            const isCorrect = this.questionLoader.checkAnswer(userAnswer, this.currentQuestion.answer);
            
            this.log(`üí≠ ${currentPlayer.name} –æ—Ç–≤–µ—Ç–∏–ª: "${userAnswer}" (${isCorrect ? '–ø—Ä–∞–≤–∏–ª—å–Ω–æ' : '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'})`);
            
            if (isCorrect) {
                currentPlayer.correctAnswers++;
                this.modalManager.showMessage(
                    '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ', 
                    '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä—É.',
                    () => this.nextTurn()
                );
            } else {
                this.modalManager.showMessage(
                    '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üòî', 
                    `–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${this.currentQuestion.answer}. –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥.`,
                    () => this.nextTurn()
                );
                this.gameState.setSkipTurns(currentPlayer.id, 1);
            }

            this.currentQuestion = null;
            
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
            this.nextTurn();
        }
    }

    nextTurn() {
        try {
            this.gameState.nextPlayer();
            this.updateCurrentPlayerDisplay();
            this.updateGameControlsDisplay();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–±–∏–∫–∞
            this.dice = null;
            this.updateDiceDisplay();

            const currentPlayer = this.gameState.getCurrentPlayer();
            this.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∫: ${currentPlayer?.name}`);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ–¥ –¥–ª—è –±–æ—Ç–∞
            if (currentPlayer && currentPlayer.isBot) {
                setTimeout(() => this.rollDice(), 1500);
            }
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ö–æ–¥–∞:', error);
        }
    }

    endGame(winner) {
        try {
            this.gameState.gameEnded = true;
            this.log(`üèÜ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner.name}`);
            
            const stats = this.gameState.getStatistics();
            let resultsHTML = `
                <div style="text-align: center;">
                    <h2>üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner.name}!</h2>
                    <p style="margin: 20px 0;">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</p>
                </div>
                <hr style="margin: 20px 0;">
                <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:</h3>
            `;
            
            stats.forEach((stat, index) => {
                const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üèÖ';
                resultsHTML += `
                    <div style="background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 8px; border-left: 4px solid ${this.gameState.players[index]?.color || '#ccc'};">
                        <strong>${medal} ${stat.name}</strong><br>
                        <small>
                            –ü–æ–∑–∏—Ü–∏—è: ${stat.position}/120 | 
                            –¢–æ—á–Ω–æ—Å—Ç—å: ${stat.accuracy}% (${stat.correctAnswers}/${stat.questionsAnswered})
                        </small>
                    </div>
                `;
            });

            this.modalManager.showResults(resultsHTML, () => {
                this.resetGame();
            });
            
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã:', error);
        }
    }

    updateThemes(themes) {
        this.selectedThemes = new Set(themes);
        this.log('üéØ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–µ–º—ã:', [...this.selectedThemes]);
    }

    resetGame() {
        try {
            this.log('üîÑ –°–±—Ä–æ—Å –∏–≥—Ä—ã...');
            
            this.gameState.reset();
            this.dice = null;
            this.currentQuestion = null;
            this.selectedThemes = new Set(['math', 'geography']);
            
            // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            this.screenManager.showScreen(SCREENS.MENU);
            
            // –û—á–∏—Å—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            this.updatePlayersDisplay();
            
            // –û—á–∏—Å—Ç–∫–∞ Canvas
            const canvas = document.getElementById('game-board');
            if (canvas) {
                const ctx = canvas.getContext('2d');
                ctx.clearRect(0, 0, canvas.width, canvas.height);
            }
            
            this.log('‚úÖ –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
            
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã:', error);
        }
    }

    // –ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateGameDisplay() {
        try {
            if (this.canvasRenderer && this.canvasRenderer.initialized) {
                this.canvasRenderer.drawBoard(this.gameBoard);
                this.canvasRenderer.drawPlayers(this.gameState.players);
            }
            this.updatePlayersGameDisplay();
            this.updateCurrentPlayerDisplay();
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –¥–∏—Å–ø–ª–µ—è:', error);
        }
    }

    updatePlayersDisplay() {
        const container = document.getElementById('players-list');
        if (!container) return;
        
        if (this.gameState.players.length === 0) {
            container.innerHTML = '<p class="no-players">–ò–≥—Ä–æ–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>';
            return;
        }
        
        container.innerHTML = this.gameState.players.map((player, index) => `
            <div class="player-item" style="border-left: 4px solid ${player.color}">
                <div class="player-info">
                    <span class="player-name">${player.name} ${player.isBot ? '(–ë–æ—Ç)' : ''}</span>
                    <span class="player-position">–ü–æ–∑–∏—Ü–∏—è: ${player.position + 1}/120</span>
                </div>
                ${player.questionsAnswered > 0 ? `
                    <div class="player-stats">
                        <small>–¢–æ—á–Ω–æ—Å—Ç—å: ${player.getAccuracy()}% (${player.correctAnswers}/${player.questionsAnswered})</small>
                    </div>
                ` : ''}
            </div>
        `).join('');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        if (this.eventHandler && this.eventHandler.updateStartButtonState) {
            this.eventHandler.updateStartButtonState();
        }
    }

    updatePlayersGameDisplay() {
        const container = document.getElementById('players-list-game');
        if (!container) return;
        
        container.innerHTML = this.gameState.players.map(player => `
            <div class="player-item" style="border-left: 4px solid ${player.color}; ${player.id === this.gameState.currentPlayerIndex ? 'background: #e3f2fd;' : ''}">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <span>${player.name}</span>
                    <span>${player.position + 1}/120</span>
                </div>
                ${player.skipTurns > 0 ? `<small style="color: #e74c3c;">–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç: ${player.skipTurns} —Ö–æ–¥(–æ–≤)</small>` : ''}
            </div>
        `).join('');
    }

    updateCurrentPlayerDisplay() {
        const currentPlayer = this.gameState.getCurrentPlayer();
        const element = document.getElementById('current-player');
        
        if (element && currentPlayer) {
            element.textContent = `–•–æ–¥: ${currentPlayer.name}`;
            element.style.color = currentPlayer.color;
        }
    }

    updateDiceDisplay() {
        const element = document.getElementById('dice-result');
        if (element) {
            element.textContent = this.dice !== null ? this.dice.toString() : '-';
        }
    }

    updateGameControlsDisplay() {
        const rollButton = document.getElementById('roll-dice');
        const moveButton = document.getElementById('move-player');
        const currentPlayer = this.gameState.getCurrentPlayer();
        
        if (rollButton && moveButton) {
            if (currentPlayer && currentPlayer.isBot) {
                rollButton.disabled = true;
                moveButton.disabled = true;
                rollButton.textContent = '–•–æ–¥ –±–æ—Ç–∞...';
                moveButton.textContent = '–î–≤–∏–≥–∞—Ç—å—Å—è';
            } else {
                rollButton.disabled = this.dice !== null;
                moveButton.disabled = this.dice === null;
                rollButton.textContent = '–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫';
                moveButton.textContent = '–î–≤–∏–≥–∞—Ç—å—Å—è';
            }
        }
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getDebugInfo() {
        return {
            initialized: this.initialized,
            gameStarted: this.gameState.gameStarted,
            gameEnded: this.gameState.gameEnded,
            playersCount: this.gameState.players.length,
            currentPlayer: this.gameState.getCurrentPlayer()?.name,
            currentScreen: this.screenManager.getCurrentScreen(),
            selectedThemes: [...this.selectedThemes],
            dice: this.dice,
            questionsLoaded: this.questionLoader.loaded
        };
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    forceAddTestPlayers() {
        this.addPlayer('–¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫', false);
        this.addPlayer('–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç', true, 'easy');
        this.log('–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏');
    }

    forceStartGame() {
        if (this.gameState.players.length === 0) {
            this.forceAddTestPlayers();
        }
        this.startGame();
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    get players() {
        return this.gameState.players;
    }

    get isGameStarted() {
        return this.gameState.gameStarted;
    }

    get isGameEnded() {
        return this.gameState.gameEnded;
    }

    get currentPlayerName() {
        return this.gameState.getCurrentPlayer()?.name;
    }
}
