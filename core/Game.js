import { GameState } from './GameState.js';
import { GameBoard } from '../entities/GameBoard.js';
import { QuestionLoader } from '../data/QuestionLoader.js';
import { CanvasRenderer } from '../rendering/CanvasRenderer.js';
import { ScreenManager } from '../ui/ScreenManager.js';
import { ModalManager } from '../ui/ModalManager.js';
import { EventHandler } from '../ui/EventHandler.js';
import { GAME_CONFIG, BOT_DIFFICULTY } from './Constants.js';

export class Game {
    constructor() {
        this.gameState = new GameState();
        this.gameBoard = new GameBoard();
        this.questionLoader = new QuestionLoader();
        this.canvasRenderer = null;
        this.screenManager = new ScreenManager();
        this.modalManager = new ModalManager();
        this.eventHandler = new EventHandler(this);
        
        this.selectedThemes = new Set(['math', 'geography']);
        this.currentQuestion = null;
        this.dice = null;
    }

    async initialize() {
        try {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            await this.questionLoader.loadQuestions();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
            this.canvasRenderer = new CanvasRenderer();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.eventHandler.setupEventListeners();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
            this.modalManager.initialize();
            
            // –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            this.screenManager.showScreen('menu');
            
            console.log('–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã:', error);
            throw error;
        }
    }

    async startGame() {
        if (this.gameState.players.length === 0) {
            alert('–î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã!');
            return;
        }

        this.gameState.gameStarted = true;
        this.screenManager.showScreen('game');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Canvas
        this.canvasRenderer.setupCanvas();
        this.updateGameDisplay();
        
        console.log('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!');
    }

    addPlayer(name, isBot = false, difficulty = 'medium') {
        if (this.gameState.players.length >= 4) {
            alert('–ú–∞–∫—Å–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞!');
            return;
        }

        const player = this.gameState.addPlayer(name, isBot, difficulty);
        this.updatePlayersDisplay();
        return player;
    }

    rollDice() {
        const currentPlayer = this.gameState.getCurrentPlayer();
        if (!currentPlayer) return;

        this.dice = Math.floor(Math.random() * 6) + 1;
        document.getElementById('dice-result').textContent = this.dice;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateCurrentPlayerDisplay();
        
        // –î–ª—è –±–æ—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–≤–∏–≥–∞–µ–º
        if (currentPlayer.isBot) {
            setTimeout(() => this.moveCurrentPlayer(), 1000);
        }
    }

    moveCurrentPlayer() {
        const currentPlayer = this.gameState.getCurrentPlayer();
        if (!currentPlayer || !this.dice) return;

        const newPosition = this.gameState.movePlayer(currentPlayer.id, this.dice);
        this.dice = null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—ã–∂–∫–æ–≤—ã–µ –∫–ª–µ—Ç–∫–∏
        const jumpTo = this.gameBoard.getJumpDestination(newPosition);
        if (jumpTo !== null) {
            currentPlayer.position = jumpTo;
            this.modalManager.showMessage(
                `${currentPlayer.name} –ø–æ–ø–∞–ª –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–µ—Ç–∫—É!`,
                jumpTo > newPosition ? '–õ–µ—Å—Ç–Ω–∏—Ü–∞ –≤–≤–µ—Ä—Ö!' : '–ó–º–µ—è –≤–Ω–∏–∑!'
            );
        }

        this.updateGameDisplay();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        const winner = this.gameState.checkWinner();
        if (winner) {
            this.endGame(winner);
            return;
        }

        // –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
        this.askQuestion();
    }

    async askQuestion() {
        const currentPlayer = this.gameState.getCurrentPlayer();
        if (!currentPlayer) return;

        try {
            this.currentQuestion = this.questionLoader.getRandomQuestion([...this.selectedThemes]);
            
            if (currentPlayer.isBot) {
                await this.handleBotAnswer();
            } else {
                this.modalManager.showQuestion(
                    this.currentQuestion.question,
                    (answer) => this.handleAnswer(answer)
                );
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:', error);
            this.nextTurn();
        }
    }

    async handleBotAnswer() {
        const currentPlayer = this.gameState.getCurrentPlayer();
        const difficulty = BOT_DIFFICULTY[currentPlayer.difficulty];
        
        // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, difficulty.thinkTime));
        
        const isCorrect = Math.random() < difficulty.correctChance;
        const answer = isCorrect ? this.currentQuestion.answer : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç';
        
        this.handleAnswer(answer);
    }

    handleAnswer(userAnswer) {
        const currentPlayer = this.gameState.getCurrentPlayer();
        if (!currentPlayer || !this.currentQuestion) return;

        currentPlayer.questionsAnswered++;
        const isCorrect = this.questionLoader.checkAnswer(userAnswer, this.currentQuestion.answer);
        
        if (isCorrect) {
            currentPlayer.correctAnswers++;
            this.modalManager.showMessage('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!', '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä—É!');
        } else {
            this.modalManager.showMessage(
                '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!', 
                `–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${this.currentQuestion.answer}. –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç–µ —Ö–æ–¥.`
            );
            this.gameState.setSkipTurns(currentPlayer.id, 1);
        }

        this.currentQuestion = null;
        this.nextTurn();
    }

    nextTurn() {
        this.gameState.nextPlayer();
        this.updateCurrentPlayerDisplay();
        document.getElementById('dice-result').textContent = '-';

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ–¥ –¥–ª—è –±–æ—Ç–∞
        const currentPlayer = this.gameState.getCurrentPlayer();
        if (currentPlayer && currentPlayer.isBot) {
            setTimeout(() => this.rollDice(), 1500);
        }
    }

    endGame(winner) {
        this.gameState.gameEnded = true;
        
        const stats = this.gameState.getStatistics();
        let resultsHTML = `<h3>üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner.name}!</h3><hr>`;
        
        stats.forEach(stat => {
            resultsHTML += `
                <div class="player-stat">
                    <strong>${stat.name}</strong><br>
                    –ü–æ–∑–∏—Ü–∏—è: ${stat.position + 1}/120<br>
                    –¢–æ—á–Ω–æ—Å—Ç—å: ${stat.accuracy}% (${stat.correctAnswers}/${stat.questionsAnswered})
                </div>
            `;
        });

        this.modalManager.showResults(resultsHTML);
    }

    updateGameDisplay() {
        if (this.canvasRenderer) {
            this.canvasRenderer.drawBoard(this.gameBoard);
            this.canvasRenderer.drawPlayers(this.gameState.players);
        }
        this.updatePlayersDisplay();
        this.updateCurrentPlayerDisplay();
    }

    updatePlayersDisplay() {
        const container = document.getElementById('players-list');
        if (!container) return;
        
        container.innerHTML = this.gameState.players.map(player => `
            <div class="player-item" style="border-left: 4px solid ${player.color}">
                <span>${player.name} ${player.isBot ? '(–ë–æ—Ç)' : ''}</span>
                <span>–ü–æ–∑–∏—Ü–∏—è: ${player.position + 1}</span>
            </div>
        `).join('');
    }

    updateCurrentPlayerDisplay() {
        const currentPlayer = this.gameState.getCurrentPlayer();
        const element = document.getElementById('current-player');
        
        if (element && currentPlayer) {
            element.textContent = `–•–æ–¥: ${currentPlayer.name}`;
            element.style.color = currentPlayer.color;
        }
    }

    updateThemes(themes) {
        this.selectedThemes = new Set(themes);
    }

    resetGame() {
        this.gameState.reset();
        this.dice = null;
        this.currentQuestion = null;
        this.screenManager.showScreen('menu');
        
        // –û—á–∏—Å—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const canvas = document.getElementById('game-board');
        if (canvas) {
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }
        
        console.log('–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
    }
}

